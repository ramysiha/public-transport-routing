/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.here.fox;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintWriter;
import java.util.Scanner;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.here.fox.service.impl.RoutingServiceFactory;
import com.here.fox.service.impl.RoutingServiceFactory.RoutingAlg;
import com.here.fox.util.CommandLineProcessor;

class CommandLineProcessorTest extends AbstractTest {

	private PipedInputStream pipedInput1;
	private PipedOutputStream pipedOutput1;

	private PipedInputStream pipedInput2;
	private PipedOutputStream pipedOutput2;

	private PrintWriter writer;
	private Scanner scanner;

	@BeforeEach
	void initData() throws IOException {
		pipedInput1 = new PipedInputStream();
		pipedOutput1 = new PipedOutputStream();

		pipedInput2 = new PipedInputStream();
		pipedOutput2 = new PipedOutputStream();

		pipedOutput2.connect(pipedInput2);
		pipedInput1.connect(pipedOutput1);

		writer = new PrintWriter(pipedOutput1, true);
		scanner = new Scanner(pipedInput2);

	}

	private void loadGraph(String graphName) {
		try (Scanner graphScanner = new Scanner(this.getClass().getResourceAsStream("/" + graphName))) {
			while (graphScanner.hasNextLine()) {
				writer.println(graphScanner.nextLine());
			}
		}

	}

	@Test
	void testGraph1() throws InterruptedException, ExecutionException {

		loadGraph("testgraph1.txt");
		CommandLineProcessor processor = new CommandLineProcessor(
				RoutingServiceFactory.createRoutingServiceFactor(RoutingAlg.DIJKSTRAS), pipedInput1, pipedOutput2);
		Future<?> future = Executors.newSingleThreadExecutor().submit(processor);
		writer.println("route A -> B");
		scanner.hasNextLine();
		assertEquals("A -> C -> B: 130", scanner.nextLine());

		writer.println("nearby A, 130");
		scanner.hasNextLine();
		assertEquals("B: 130, C: 70, D: 120", scanner.nextLine());

		writer.close();
		scanner.close();

		future.get();
	}

	@Test
	void testGraph2() throws InterruptedException, ExecutionException {

		loadGraph("testgraph2.txt");
		CommandLineProcessor processor = new CommandLineProcessor(
				RoutingServiceFactory.createRoutingServiceFactor(RoutingAlg.DIJKSTRAS), pipedInput1, pipedOutput2);
		Future<?> future = Executors.newSingleThreadExecutor().submit(processor);
		writer.println("route A -> B");
		scanner.hasNextLine();
		assertEquals("A -> B: 1", scanner.nextLine());

		writer.println("route C -> B");
		scanner.hasNextLine();
		assertEquals("C -> B: 1", scanner.nextLine());

		writer.println("route A -> A");
		scanner.hasNextLine();
		assertEquals("A: 0", scanner.nextLine());

		writer.println("route A -> F");
		scanner.hasNextLine();
		assertEquals("Invalid Query!", scanner.nextLine());

		writer.println("nearby A, 1");
		scanner.hasNextLine();
		assertEquals("B: 1, C: 1", scanner.nextLine());

		writer.println("nearby F, 0");
		scanner.hasNextLine();
		assertEquals("Invalid Query!", scanner.nextLine());

		writer.close();
		scanner.close();

		future.get();
	}
	
	@Test
	void testGraph3() throws InterruptedException, ExecutionException {

		loadGraph("testgraph3.txt");
		CommandLineProcessor processor = new CommandLineProcessor(
				RoutingServiceFactory.createRoutingServiceFactor(RoutingAlg.DIJKSTRAS), pipedInput1, pipedOutput2);
		Future<?> future = Executors.newSingleThreadExecutor().submit(processor);
		writer.println("route A -> B");
		scanner.hasNextLine();
		assertEquals("A -> B: 2", scanner.nextLine());
		
		writer.println("route A -> C");
		scanner.hasNextLine();
		assertEquals("A -> D -> C: 3", scanner.nextLine());
		
		writer.println("route A -> D");
		scanner.hasNextLine();
		assertEquals("A -> D: 1", scanner.nextLine());
		
		writer.println("route A -> E");
		scanner.hasNextLine();
		assertEquals("A -> D -> E: 3", scanner.nextLine());
		
		writer.println("route A -> F");
		scanner.hasNextLine();
		assertEquals("A -> D -> G -> F: 6", scanner.nextLine());
		
		writer.println("route A -> G");
		scanner.hasNextLine();
		assertEquals("A -> D -> G: 5", scanner.nextLine());
		
		writer.close();
		scanner.close();

		future.get();
	}
}
